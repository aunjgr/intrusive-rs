var searchIndex={};
searchIndex["intrusive_collections"] = {"doc":"Intrusive collections for Rust.","i":[[3,"UnsafeRef","intrusive_collections","Unchecked shared pointer",null,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",0,null],[11,"from_raw","","Creates an `UnsafeRef` from a raw pointer",1,[[],["unsaferef"]]],[11,"into_raw","","Converts an `UnsafeRef` into a raw pointer",1,[[]]],[11,"from_box","","Creates an `UnsafeRef` from a `Box`",1,[[["box"]],["unsaferef"]]],[11,"into_box","","Converts an `UnsafeRef` into a `Box`",1,[[],["box"]]],[0,"linked_list","","Intrusive doubly-linked list.",null,null],[3,"Link","intrusive_collections::linked_list","Intrusive link that allows an object to be inserted into a…",null,null],[3,"Cursor","","A cursor which provides read-only access to a `LinkedList`.",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `LinkedList`.",null,null],[3,"LinkedList","","An intrusive doubly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator which consumes a `LinkedList`.",null,null],[11,"new","","Creates a new `Link`.",2,[[],["link"]]],[11,"is_linked","","Checks whether the `Link` is linked into a `LinkedList`.",2,[[["self"]],["bool"]]],[11,"force_unlink","","Forcibly unlinks an object from a `LinkedList`.",2,[[["self"]]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",3,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",3,[[["self"]],["option"]]],[11,"clone_pointer","","Clones and returns the pointer that points to the element…",3,[[["self"]],["option"]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",3,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",3,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",3,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",3,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",4,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",4,[[["self"]],["option"]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",4,[[["self"]],["cursor"]]],[11,"move_next","","Moves the cursor to the next element of the `LinkedList`.",4,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",4,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",4,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",4,[[["self"]],["cursor"]]],[11,"remove","","Removes the current element from the `LinkedList`.",4,[[["self"]],["option"]]],[11,"replace_with","","Removes the current element from the `LinkedList` and…",4,[[["self"]],["result"]]],[11,"insert_after","","Inserts a new element into the `LinkedList` after the…",4,[[["self"]]]],[11,"insert_before","","Inserts a new element into the `LinkedList` before the…",4,[[["self"]]]],[11,"splice_after","","Inserts the elements from the given `LinkedList` after the…",4,[[["self"],["linkedlist"]]]],[11,"splice_before","","Moves all element from the given `LinkedList` before the…",4,[[["self"],["linkedlist"]]]],[11,"split_after","","Splits the list into two after the current element. This…",4,[[["self"]],["linkedlist"]]],[11,"split_before","","Splits the list into two before the current element. This…",4,[[["self"]],["linkedlist"]]],[11,"new","","Creates an empty `LinkedList`.",5,[[["a"]],["linkedlist"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",5,[[["self"]],["bool"]]],[11,"cursor","","Returns a null `Cursor` for this list.",5,[[["self"]],["cursor"]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",5,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",5,[[["self"]],["cursor"]]],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",5,[[["self"]],["cursormut"]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",5,[[["self"]],["cursor"]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",5,[[["self"]],["cursormut"]]],[11,"back","","Returns a `Cursor` pointing to the last element of the…",5,[[["self"]],["cursor"]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the…",5,[[["self"]],["cursormut"]]],[11,"iter","","Gets an iterator over the objects in the `LinkedList`.",5,[[["self"]],["iter"]]],[11,"clear","","Removes all elements from the `LinkedList`.",5,[[["self"]]]],[11,"fast_clear","","Empties the `LinkedList` without unlinking or freeing…",5,[[["self"]]]],[11,"take","","Takes all the elements out of the `LinkedList`, leaving it…",5,[[["self"]],["linkedlist"]]],[11,"push_front","","Inserts a new element at the start of the `LinkedList`.",5,[[["self"]]]],[11,"push_back","","Inserts a new element at the end of the `LinkedList`.",5,[[["self"]]]],[11,"pop_front","","Removes the first element of the `LinkedList`.",5,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element of the `LinkedList`.",5,[[["self"]],["option"]]],[0,"rbtree","intrusive_collections","Intrusive red-black tree.",null,null],[3,"Link","intrusive_collections::rbtree","Intrusive link that allows an object to be inserted into a…",null,null],[3,"Cursor","","A cursor which provides read-only access to a `RBTree`.",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `RBTree`.",null,null],[3,"RBTree","","An intrusive red-black tree.",null,null],[3,"InsertCursor","","A cursor pointing to a slot in which an element can be…",null,null],[3,"Iter","","An iterator over references to the items of a `RBTree`.",null,null],[3,"IntoIter","","An iterator which consumes a `RBTree`.",null,null],[4,"Entry","","An entry in a `RBTree`.",null,null],[13,"Occupied","","An occupied entry.",6,null],[13,"Vacant","","A vacant entry.",6,null],[11,"new","","Creates a new `Link`.",7,[[],["link"]]],[11,"is_linked","","Checks whether the `Link` is linked into a `RBTree`.",7,[[["self"]],["bool"]]],[11,"force_unlink","","Forcibly unlinks an object from a `RBTree`.",7,[[["self"]]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",8,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",8,[[["self"]],["option"]]],[11,"clone_pointer","","Clones and returns the pointer that points to the element…",8,[[["self"]],["option"]]],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",8,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",8,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",8,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",8,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",9,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",9,[[["self"]],["option"]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",9,[[["self"]],["cursor"]]],[11,"move_next","","Moves the cursor to the next element of the `RBTree`.",9,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the `RBTree`.",9,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",9,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",9,[[["self"]],["cursor"]]],[11,"remove","","Removes the current element from the `RBTree`.",9,[[["self"]],["option"]]],[11,"replace_with","","Removes the current element from the `RBTree` and inserts…",9,[[["self"]],["result"]]],[11,"insert_after","","Inserts a new element into the `RBTree` after the current…",9,[[["self"]]]],[11,"insert_before","","Inserts a new element into the `RBTree` before the current…",9,[[["self"]]]],[11,"insert","","Inserts a new element into the `RBTree`.",9,[[["self"]]]],[11,"new","","Creates an empty `RBTree`.",10,[[["a"]],["rbtree"]]],[11,"is_empty","","Returns `true` if the `RBTree` is empty.",10,[[["self"]],["bool"]]],[11,"cursor","","Returns a null `Cursor` for this tree.",10,[[["self"]],["cursor"]]],[11,"cursor_mut","","Returns a null `CursorMut` for this tree.",10,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",10,[[["self"]],["cursor"]]],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",10,[[["self"]],["cursormut"]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",10,[[["self"]],["cursor"]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",10,[[["self"]],["cursormut"]]],[11,"back","","Returns a `Cursor` pointing to the last element of the…",10,[[["self"]],["cursor"]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the…",10,[[["self"]],["cursormut"]]],[11,"iter","","Gets an iterator over the objects in the `RBTree`, in…",10,[[["self"]],["iter"]]],[11,"clear","","Removes all elements from the `RBTree`.",10,[[["self"]]]],[11,"fast_clear","","Empties the `RBTree` without unlinking or freeing objects…",10,[[["self"]]]],[11,"take","","Takes all the elements out of the `RBTree`, leaving it…",10,[[["self"]],["rbtree"]]],[11,"find","","Returns a `Cursor` pointing to an element with the given…",10,[[["self"],["q"]],["cursor"]]],[11,"find_mut","","Returns a `CursorMut` pointing to an element with the…",10,[[["self"],["q"]],["cursormut"]]],[11,"lower_bound","","Returns a `Cursor` pointing to the lowest element whose…",10,[[["bound"],["self"],["q"]],["cursor"]]],[11,"lower_bound_mut","","Returns a `CursorMut` pointing to the first element whose…",10,[[["self"],["bound"],["q"]],["cursormut"]]],[11,"upper_bound","","Returns a `Cursor` pointing to the last element whose key…",10,[[["bound"],["self"],["q"]],["cursor"]]],[11,"upper_bound_mut","","Returns a `CursorMut` pointing to the last element whose…",10,[[["self"],["bound"],["q"]],["cursormut"]]],[11,"insert","","Inserts a new element into the `RBTree`.",10,[[["self"]],["cursormut"]]],[11,"entry","","Returns an `Entry` for the given key which contains a…",10,[[["self"],["q"]],["entry"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",10,[[["min"],["max"],["bound"],["bound"],["self"]],["iter"]]],[11,"insert","","Inserts a new element into the `RBTree` at the location…",11,[[],["cursormut"]]],[11,"or_insert","","Inserts an element into the `RBTree` if the entry is…",6,[[],["cursormut"]]],[11,"or_insert_with","","Calls the given function and inserts the result into the…",6,[[["f"]],["cursormut"]]],[0,"singly_linked_list","intrusive_collections","Intrusive singly-linked list.",null,null],[3,"Link","intrusive_collections::singly_linked_list","Intrusive link that allows an object to be inserted into a…",null,null],[3,"Cursor","","A cursor which provides read-only access to a…",null,null],[3,"CursorMut","","A cursor which provides mutable access to a…",null,null],[3,"SinglyLinkedList","","An intrusive singly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a…",null,null],[3,"IntoIter","","An iterator which consumes a `SinglyLinkedList`.",null,null],[11,"new","","Creates a new `Link`.",12,[[],["link"]]],[11,"is_linked","","Checks whether the `Link` is linked into a…",12,[[["self"]],["bool"]]],[11,"force_unlink","","Forcibly unlinks an object from a `SinglyLinkedList`.",12,[[["self"]]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",13,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",13,[[["self"]],["option"]]],[11,"clone_pointer","","Clones and returns the pointer that points to the element…",13,[[["self"]],["option"]]],[11,"move_next","","Moves the cursor to the next element of the…",13,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",13,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",14,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",14,[[["self"]],["option"]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",14,[[["self"]],["cursor"]]],[11,"move_next","","Moves the cursor to the next element of the…",14,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",14,[[["self"]],["cursor"]]],[11,"remove_next","","Removes the next element from the `SinglyLinkedList`.",14,[[["self"]],["option"]]],[11,"replace_next_with","","Removes the next element from the `SinglyLinkedList` and…",14,[[["self"]],["result"]]],[11,"insert_after","","Inserts a new element into the `SinglyLinkedList` after…",14,[[["self"]]]],[11,"splice_after","","Inserts the elements from the given `SinglyLinkedList`…",14,[[["self"],["singlylinkedlist"]]]],[11,"split_after","","Splits the list into two after the current element. This…",14,[[["self"]],["singlylinkedlist"]]],[11,"new","","Creates an empty `SinglyLinkedList`.",15,[[["a"]],["singlylinkedlist"]]],[11,"is_empty","","Returns `true` if the `SinglyLinkedList` is empty.",15,[[["self"]],["bool"]]],[11,"cursor","","Returns a null `Cursor` for this list.",15,[[["self"]],["cursor"]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",15,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr","","Creates a `Cursor` from a pointer to an element.",15,[[["self"]],["cursor"]]],[11,"cursor_mut_from_ptr","","Creates a `CursorMut` from a pointer to an element.",15,[[["self"]],["cursormut"]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",15,[[["self"]],["cursor"]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",15,[[["self"]],["cursormut"]]],[11,"iter","","Gets an iterator over the objects in the `SinglyLinkedList`.",15,[[["self"]],["iter"]]],[11,"clear","","Removes all elements from the `SinglyLinkedList`.",15,[[["self"]]]],[11,"fast_clear","","Empties the `SinglyLinkedList` without unlinking or…",15,[[["self"]]]],[11,"take","","Takes all the elements out of the `SinglyLinkedList`,…",15,[[["self"]],["singlylinkedlist"]]],[11,"push_front","","Inserts a new element at the start of the…",15,[[["self"]]]],[11,"pop_front","","Removes the first element of the `SinglyLinkedList`.",15,[[["self"]],["option"]]],[0,"xor_linked_list","intrusive_collections","Intrusive xor doubly-linked list which uses less memory…",null,null],[3,"Link","intrusive_collections::xor_linked_list","Intrusive link that allows an object to be inserted into a…",null,null],[3,"Cursor","","A cursor which provides read-only access to a…",null,null],[3,"CursorMut","","A cursor which provides mutable access to a `XorLinkedList`.",null,null],[3,"XorLinkedList","","Intrusive xor doubly-linked list which uses less memory…",null,null],[3,"Iter","","An iterator over references to the items of a…",null,null],[3,"IntoIter","","An iterator which consumes a `XorLinkedList`.",null,null],[11,"new","","Creates a new `Link`.",16,[[],["self"]]],[11,"is_linked","","Checks whether the `Link` is linked into a `XorLinkedList`.",16,[[["self"]],["bool"]]],[11,"force_unlink","","Forcibly unlinks an object from a `XorLinkedList`.",16,[[["self"]]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",17,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",17,[[["self"]],["option"]]],[11,"move_next","","Moves the cursor to the next element of the `XorLinkedList`.",17,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",17,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",17,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",17,[[["self"]],["cursor"]]],[11,"is_null","","Checks if the cursor is currently pointing to the null…",18,[[["self"]],["bool"]]],[11,"get","","Returns a reference to the object that the cursor is…",18,[[["self"]],["option"]]],[11,"as_cursor","","Returns a read-only cursor pointing to the current element.",18,[[["self"]],["cursor"]]],[11,"move_next","","Moves the cursor to the next element of the `XorLinkedList`.",18,[[["self"]]]],[11,"move_prev","","Moves the cursor to the previous element of the…",18,[[["self"]]]],[11,"peek_next","","Returns a cursor pointing to the next element of the…",18,[[["self"]],["cursor"]]],[11,"peek_prev","","Returns a cursor pointing to the previous element of the…",18,[[["self"]],["cursor"]]],[11,"insert_after","","Inserts a new element into the `XorLinkedList` after the…",18,[[["self"]]]],[11,"insert_before","","Inserts a new element into the `XorLinkedList` before the…",18,[[["self"]]]],[11,"remove","","Removes the current element from the `XorLinkedList`.",18,[[["self"]],["option"]]],[11,"replace_with","","Removes the current element from the `XorLinkedList` and…",18,[[["self"]],["result"]]],[11,"splice_after","","Inserts the elements from the given `XorLinkedList` after…",18,[[["xorlinkedlist"],["self"]]]],[11,"splice_before","","Moves all element from the given `XorLinkedList` before…",18,[[["xorlinkedlist"],["self"]]]],[11,"split_after","","Splits the list into two after the current element. This…",18,[[["self"]],["xorlinkedlist"]]],[11,"split_before","","Splits the list into two before the current element. This…",18,[[["self"]],["xorlinkedlist"]]],[11,"new","","Creates an empty `XorLinkedList`.",19,[[["a"]],["xorlinkedlist"]]],[11,"is_empty","","Returns `true` if the `XorLinkedList` is empty.",19,[[["self"]],["bool"]]],[11,"cursor","","Returns a null `Cursor` for this list.",19,[[["self"]],["cursor"]]],[11,"cursor_mut","","Returns a null `CursorMut` for this list.",19,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr_and_prev","","Creates a `Cursor` from a pointer to an element and a…",19,[[["self"]],["cursor"]]],[11,"cursor_mut_from_ptr_and_prev","","Creates a `CursorMut` from a pointer to an element and a…",19,[[["self"]],["cursormut"]]],[11,"cursor_from_ptr_and_next","","Creates a `Cursor` from a pointer to an element and a…",19,[[["self"]],["cursor"]]],[11,"cursor_mut_from_ptr_and_next","","Creates a `CursorMut` from a pointer to an element and a…",19,[[["self"]],["cursormut"]]],[11,"front","","Returns a `Cursor` pointing to the first element of the…",19,[[["self"]],["cursor"]]],[11,"front_mut","","Returns a `CursorMut` pointing to the first element of the…",19,[[["self"]],["cursormut"]]],[11,"back","","Returns a `Cursor` pointing to the last element of the…",19,[[["self"]],["cursor"]]],[11,"back_mut","","Returns a `CursorMut` pointing to the last element of the…",19,[[["self"]],["cursormut"]]],[11,"iter","","Gets an iterator over the objects in the `XorLinkedList`.",19,[[["self"]],["iter"]]],[11,"clear","","Removes all elements from the `XorLinkedList`.",19,[[["self"]]]],[11,"fast_clear","","Empties the `XorLinkedList` without unlinking or freeing…",19,[[["self"]]]],[11,"take","","Takes all the elements out of the `XorLinkedList`, leaving…",19,[[["self"]],["xorlinkedlist"]]],[11,"push_front","","Inserts a new element at the start of the `XorLinkedList`.",19,[[["self"]]]],[11,"push_back","","Inserts a new element at the end of the `XorLinkedList`.",19,[[["self"]]]],[11,"pop_front","","Removes the first element of the `XorLinkedList`.",19,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element of the `XorLinkedList`.",19,[[["self"]],["option"]]],[8,"Adapter","intrusive_collections","Trait for a adapter which allows a type to be inserted…",null,null],[16,"Link","","Collection-specific link type which allows an object to be…",20,null],[16,"Value","","Object type which is inserted in an intrusive collection.",20,null],[16,"Pointer","","Pointer type which owns an instance of a value.",20,null],[10,"get_value","","Gets a reference to an object from a reference to a link…",20,[[["self"]]]],[10,"get_link","","Gets a reference to the link for the given object.",20,[[["self"]]]],[8,"IntrusivePointer","","Trait representing an owned pointer type which can be…",null,null],[11,"into_raw","","Consumes the owned pointer and returns a raw pointer to…",21,[[]]],[10,"from_raw","","Constructs an owned pointer from a raw pointer which was…",21,[[],["self"]]],[8,"KeyAdapter","","Extension of the `Adapter` trait to provide a way of…",null,null],[16,"Key","","Type of the key returned by `get_key`.",22,null],[10,"get_key","","Gets the key for the given object.",22,[[["self"]]]],[14,"offset_of","","Macro to get the offset of a struct field in bytes from…",null,null],[14,"container_of","","Unsafe macro to get a raw pointer to an outer object from…",null,null],[14,"intrusive_adapter","","Macro to generate an implementation of `Adapter` for a…",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","intrusive_collections::linked_list","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into_iter","","",23,[[],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into_iter","","",24,[[],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","intrusive_collections::rbtree","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into_iter","","",25,[[],["i"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into_iter","","",26,[[],["i"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","intrusive_collections::singly_linked_list","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into_iter","","",15,[[],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into_iter","","",27,[[],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into_iter","","",28,[[],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","intrusive_collections::xor_linked_list","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into_iter","","",19,[[],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into_iter","","",29,[[],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into_iter","","",30,[[],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"into_raw","intrusive_collections","",1,[[]]],[11,"from_raw","","",1,[[],["self"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","intrusive_collections::linked_list","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","intrusive_collections::rbtree","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","intrusive_collections::singly_linked_list","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","intrusive_collections::xor_linked_list","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","intrusive_collections","",0,[[["formatter"],["self"]],["result"]]],[11,"eq","","",0,[[["self"],["bound"]],["bool"]]],[11,"ne","","",0,[[["self"],["bound"]],["bool"]]],[11,"drop","intrusive_collections::linked_list","",5,[[["self"]]]],[11,"drop","intrusive_collections::rbtree","",10,[[["self"]]]],[11,"drop","intrusive_collections::singly_linked_list","",15,[[["self"]]]],[11,"drop","intrusive_collections::xor_linked_list","",19,[[["self"]]]],[11,"hash","intrusive_collections","",0,[[["self"],["__h"]]]],[11,"next","intrusive_collections::linked_list","",23,[[["self"]],["option"]]],[11,"next","","",24,[[["self"]],["option"]]],[11,"next","intrusive_collections::rbtree","",25,[[["self"]],["option"]]],[11,"next","","",26,[[["self"]],["option"]]],[11,"next","intrusive_collections::singly_linked_list","",27,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"next","intrusive_collections::xor_linked_list","",29,[[["self"]],["option"]]],[11,"next","","",30,[[["self"]],["option"]]],[11,"next_back","intrusive_collections::linked_list","",23,[[["self"]],["option"]]],[11,"next_back","","",24,[[["self"]],["option"]]],[11,"next_back","intrusive_collections::rbtree","",25,[[["self"]],["option"]]],[11,"next_back","","",26,[[["self"]],["option"]]],[11,"next_back","intrusive_collections::xor_linked_list","",29,[[["self"]],["option"]]],[11,"next_back","","",30,[[["self"]],["option"]]],[11,"into_iter","intrusive_collections::linked_list","",5,[[],["intoiter"]]],[11,"into_iter","intrusive_collections::rbtree","",10,[[],["intoiter"]]],[11,"into_iter","intrusive_collections::singly_linked_list","",15,[[],["intoiter"]]],[11,"into_iter","intrusive_collections::xor_linked_list","",19,[[],["intoiter"]]],[11,"as_ref","intrusive_collections","",1,[[["self"]],["t"]]],[11,"clone","","",1,[[["self"]],["unsaferef"]]],[11,"clone","intrusive_collections::linked_list","",2,[[["self"]],["link"]]],[11,"clone","","",3,[[["self"]],["cursor"]]],[11,"clone","","",23,[[["self"]],["iter"]]],[11,"clone","intrusive_collections::rbtree","",7,[[["self"]],["link"]]],[11,"clone","","",8,[[["self"]],["cursor"]]],[11,"clone","","",25,[[["self"]],["iter"]]],[11,"clone","intrusive_collections::singly_linked_list","",12,[[["self"]],["link"]]],[11,"clone","","",13,[[["self"]],["cursor"]]],[11,"clone","","",27,[[["self"]],["iter"]]],[11,"clone","intrusive_collections::xor_linked_list","",16,[[["self"]],["link"]]],[11,"clone","","",17,[[["self"]],["cursor"]]],[11,"clone","","",29,[[["self"]],["iter"]]],[11,"clone","intrusive_collections","",0,[[["self"]],["bound"]]],[11,"default","intrusive_collections::linked_list","",2,[[],["link"]]],[11,"default","","",5,[[],["linkedlist"]]],[11,"default","intrusive_collections::rbtree","",7,[[],["link"]]],[11,"default","","",10,[[],["rbtree"]]],[11,"default","intrusive_collections::singly_linked_list","",12,[[],["link"]]],[11,"default","","",15,[[],["singlylinkedlist"]]],[11,"default","intrusive_collections::xor_linked_list","",16,[[],["link"]]],[11,"default","","",19,[[],["xorlinkedlist"]]],[11,"borrow","intrusive_collections","",1,[[["self"]],["t"]]],[11,"into_raw","","Consumes the owned pointer and returns a raw pointer to…",21,[[]]]],"p":[[4,"Bound"],[3,"UnsafeRef"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"LinkedList"],[4,"Entry"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"RBTree"],[3,"InsertCursor"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"SinglyLinkedList"],[3,"Link"],[3,"Cursor"],[3,"CursorMut"],[3,"XorLinkedList"],[8,"Adapter"],[8,"IntrusivePointer"],[8,"KeyAdapter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"]]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and…","i":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the…",null,null],[14,"span_of","","Produces a range instance representing the sub-slice…",null,null]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);